@using AdminB2017.Feature.DataVisualization.Models
@using Sitecore.XA.Foundation.SitecoreExtensions.Extensions
@using Sitecore.XA.Foundation.MarkupDecorator.Extensions

@model ScatterPlotRenderingModel


@if (Model.DataSourceItem == null)
{
  @Model.MessageIsEmpty
}
else
{
  <div @Html.Sxa().Component("scatterplot", Model.Attributes)>
    <div class="component-content" style="height: 100%" ; width: 100%">
      @Model.MessageEditHere
      <div id="@Model.Id">
        <script src="http://d3js.org/d3.v4.min.js"></script>

        <script>
          // set the dimensions and margins of the graph
          var margin = { top: 20, right: 20, bottom: 30, left: 50 },
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

          // parse the date / time
          var parseTime = d3.timeParse("%d-%b-%y");
          var formatTime = d3.timeFormat("%e %B");

          // set the ranges
          var x = d3.scaleTime().range([0, width]);
          var y = d3.scaleLinear().range([height, 0]);


          //TODO: dynamically get id of container div
          var divId = "@Model.Id";
          var div = d3.select("#" + divId).append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);
          // append the svg obgect to the appropriate div
          // appends a 'group' element to 'svg'
          // moves the 'group' element to the top left margin
          var svg = d3.select("#" + divId).append("svg")
            .attr("width", "100%")
            .attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom))
            .attr("preserveAspectRatio", "xMinYMin meet")
            .append("g")
            .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");
          // Get the data
          d3.csv("@Model.DataUrl", function (error, data) {
            if (error) throw error;
            // format the data
            data.forEach(function (d) {
              d.date = parseTime(d.date);
              d.pointVal = +d.pointVal;
            });
            // scale the range of the data
            x.domain(d3.extent(data, function (d) { return d.date; }));
            y.domain([0, d3.max(data, function (d) { return d.pointVal; })]);
            // add the dots with tooltips
            svg.selectAll("dot")
              .data(data)
              .enter().append("circle")
              .attr("r", 5)
              .attr("cx", function (d) { return x(d.date); })
              .attr("cy", function (d) { return y(d.pointVal); })
              .on("mouseover", function (d) {
                div.transition()
                  .duration(200)
                  .style("opacity", .9);
                div.html(formatTime(d.date) + "<br/>" + d.pointVal)
                  .style("left", (d3.event.pageX) + "px")
                  .style("top", (d3.event.pageY - 28) + "px");
              })
              .on("mouseout", function (d) {
                div.transition()
                  .duration(500)
                  .style("opacity", 0);
              });
            // add the X Axis
            svg.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x));
            // add the Y Axis
            svg.append("g")
              .call(d3.axisLeft(y));
          });

          function type(d) {
            d.date = parseDate(d["@Model.DateColumnName"]);
            d.pointVal = +d["@Model.ValueColumnName"];
            return d;
          }
        </script>
      </div>
    </div>
  </div>
}
